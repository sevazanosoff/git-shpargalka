// Шпаргалка Git
// -------------------------------------------------------------------------------------------
// Коммиты — основные конструктивные элементы временной шкалы проекта Git.
//  Их можно рассматривать как снимки состояния или контрольные точки на временной шкале проекта Git. 
//  Коммиты создаются с помощью команды git commit , которая делает снимок состояния проекта на текущий момент времени.
// -------------------------------------------------------------------------------------------
// Репозиторий Git — это место, где хранится ваш код и вся информация о его изменениях. 
// Репозитории могут находиться у вас на компьютере, на компьютерах ваших коллег и на удалённом сервере.
// -------------------------------------------------------------------------------------------
// ШПАРГАЛКА ПО ОСНОВНЫМ КОМАНДАМ // // // // // // -------------------------------------------------------------------------------------------
// Git - популярная система контроля версий. 
// GIT ADD
// Команда git add добавляет содержимое в рабочей директории в индекс для последующего комита.
// GIT STATUS
// Команда git status показывает состояния файлов в рабочей директории и индексе.
// GIT DIFF 
// Команда git diff используется для вычиссления разницы между любыми двумя Git деревьями.
// GIT DIFFTOOL 
// Команда git difftool просто запускает внешнюю утилиту сравнения для показа различий в двух деревьях
// GIT COMMIT
// Команда git commit берёт все данные, добавленные в индекс с помощью GIT ADD и сохраняет
// их слепох во внутренней базе данных, а затем сдвигает указатель текущей ветки на этот слепок.
// GIT RESET
// Команда git reset используется в основном для отмены изменений.
// GIT RM
// Команда git rm используется в Git для удаления файлов из индекса и рабочей директории.
// Она похожа на git add, но она удаляет файлы, а не доббавляет для след.комита
// GIT MV
// Команда git mmv - это всего лишь удобный способ переместить файл, а затем выполнить
// git add для нового файла и git rm для старого.
// GIT CLEAN
// Команда git clean используется для удаления мусора из рабочей директории.
// ШПАРКАЛКА ПО ВЕТВЛЕНИЮ И СЛИЯНИЮ // // // // // // -------------------------------------------------------------------------------------------
// GIT BRANCH
// Команда git branch - это своего ррода "менеджер веток".Она умеет перечислять ваши ветки,
// создавать новые, удалять и переименовывать их
// GIT CHECKOUT
// Команда git checkout используется для переключения веток и выгрузки их содержимого в 
// рабочую директорию
// GIT MERGE
// Команда git merge используется для слияния одной или нескольких веток в текущую
// GIT MERGETOOL
// Команда git mergetool просто вызывает внешнюю программу слияний, в случае если у вас
// возникли проблемы слияния
// GIT LOG
// Команда git log используется для просмотра истории коммитов, начиная с самого свежего и
// уходя к истокам проекта.
// GIT STASH
// Команда git stash используется для временного сохранения всех незакоммиченных изменений
// для очисстки рабочей директории без необходимисти коммитить незавершенную работу в новую ветку
// GIT TAG
// Команда git tag используется для задания постоянной метки на какой-либо момент в истории проекта
// Обычно она используется для релизов
// ШПАРКАЛКА ПО СОВМЕСТНОЙ РАБОТЕ И ОБНОВЛЕНИЮ ПРОЕКТОВ // // // // // // -------------------------------------------------------------------------------------------
// GIT FETCH
// Команда git fetch связывается с удалённым репозиторием и забирет из него все изменения, которых у вас пока нет
// и сохраняет их локально
// GIT PULL
// Команда git pull работает как комбинация команд git fetch и git merge, вначале забирает изменения
// из указанного удалённого репозитория, а затем пытается слить их с текущей веткой
// GIT PUSH
// Команда git push используется для установления связи с удалённым репозиторием, вычисления локальных изменений отсутствующих
// в нём, и собственно их передачи в вышеупомянутый репозиторий.
// GIT REMOTE
// Команда git remote служит для управления списком удалённых репозиториев. Она позволяет сохранять
// длинные URL репозиториев в виде понятных коротких строк, например "origin"
// GIT ARCHIVE
// Команда git archive используется для упаковки в архивв указанных коммитов или всего репозитория
// GIT SUBMODULE
// Команда git submodule используется для управления вложенными репозиториями.Например, это могут быть
// библиотеки или другие, используемные не только в этом проекте ресурсы.
// ШПАРКАЛКА ПО ОСМОТРУ И СРАВНЕНИЮ // // // // // // -------------------------------------------------------------------------------------------
// GIT SHOW 
// Команда git show отображает объект в простом и человекопонятном виде.Обычно она используется для
// просмотра информации о метке или коммите
// GIT SHORTLOG 
// Команда git shortlog служит для подведения итогов команды git log.
// GIT DESCRIBE
// Команда git describe принимает на вход что угодно, что можно трактовать как коммит(ветку, тег)
// и выводит более-менее человекочитаемую строку, которая не изменится в будущем для данного комита.
// ШПАРКАЛКА ПО ОТЛАДКЕ // // // // // // -------------------------------------------------------------------------------------------
// GIT BISECT
// Команда git bisect - это чрезвычайно полезная утилита для поиска коммита в котором впервые проявился баг
// или проблема с помощью автоматического бинарного поиска.
// GIT BLAME
// Команда git blame выводит перед каждой строкой файла SHA-1 коммита, последний раз менявшего эту строку
// и автора этого коммита.Это помогает в поисках человека, которому нужно задавать вопросы о проблемном куске кода
// GIT GREP
// Команда git grep используется для поиска любой строки или регулярного выражения в любом из файлов
// вашего проекта, адже в более ранних его версиях